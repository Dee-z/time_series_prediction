'''
Produce a collapsed feature representation on Madrid Transfer to ICU Prediction


'''

# Default environment variables
# Can override with local env variables

MADRID_VERSION = os.environ.get('MADRID_VERSION', 'v20200424')
PROJECT_REPO_DIR = os.environ.get("PROJECT_REPO_DIR", os.path.abspath("../../../"))
PROJECT_CONDA_ENV_YAML = os.path.join(PROJECT_REPO_DIR, "ts_pred.yml")

MADRID_DATASET_TOP_PATH = os.path.join(os.path.abspath("../../../../"), "datasets/")
MADRID_DATASET_STD_PATH = os.path.join(MADRID_DATASET_TOP_PATH, MADRID_VERSION, "HUF_maxN21000/")

rule align_to_grid:
    input:
        align_script=os.path.join(PROJECT_REPO_DIR, 'src', 'align_to_grid.py'),
        x_csv=os.path.join(MADRID_DATASET_STD_PATH, 'vitals.csv'),
        x_spec_json=os.path.join(MADRID_DATASET_STD_PATH, 'Spec-Vitals.json')

    output:
        aligned_csv=os.path.join(MADRID_DATASET_STD_PATH, 'alignedfeatures_per_tstep.csv')


    conda:
        PROJECT_CONDA_ENV_YAML

    shell:
        '''
        python -u {input.align_script} \
            --input_ts_csv_path {input.x_csv} \
            --data_dict {input.x_spec_json} \
	    --step_size '1H' \
            --output {output.aligned_csv} \
        '''


rule normalize_features:
    input:
        normalize_script=os.path.join(PROJECT_REPO_DIR, 'src', 'normalize_features.py'),
        x_csv=os.path.join(MADRID_DATASET_STD_PATH, 'alignedfeatures_per_tstep.csv'),
        x_spec_json=os.path.join(MADRID_DATASET_STD_PATH, 'Spec-Vitals.json')

    output:
        normx_csv=os.path.join(MADRID_DATASET_STD_PATH, 'normfeatures_per_tstep.csv')


    conda:
        PROJECT_CONDA_ENV_YAML

    shell:
        '''
        python -u {input.normalize_script} \
            --input {input.x_csv} \
            --data_dict {input.x_spec_json} \
            --output {output.normx_csv} \
        '''



rule collapse_features:
    input:
        script=os.path.join(PROJECT_REPO_DIR, 'src', 'feature_transformation.py'),
        x_csv=os.path.join(MADRID_DATASET_STD_PATH, 'normfeatures_per_tstep.csv'),
        x_spec_json=os.path.join(MADRID_DATASET_STD_PATH, 'Spec-Vitals.json')

    output:
        collapsedx_csv=os.path.join(MADRID_DATASET_STD_PATH, 'CollapsedFeaturesPerSequence.csv'),
        collapsedx_json=os.path.join(MADRID_DATASET_STD_PATH, 'Spec_CollapsedFeaturesPerSequence.json')

    conda:
        PROJECT_CONDA_ENV_YAML

    shell:
        '''
        python -u {input.script} \
            --input {input.x_csv} \
            --data_dict {input.x_spec_json} \
            --output {output.collapsedx_csv} \
            --data_dict_output {output.collapsedx_json} \
            --range_pairs "[(0,100)]" \
            --collapse
        '''


rule split_into_train_and_test:
    input:
        script=os.path.join(PROJECT_REPO_DIR, 'src', 'split_dataset.py'),
        collapsedx_csv=os.path.join(MADRID_DATASET_STD_PATH, 'CollapsedFeaturesPerSequence.csv'),
        collapsedx_json=os.path.join(MADRID_DATASET_STD_PATH, 'Spec_CollapsedFeaturesPerSequence.json'),
        collapsedy_csv=os.path.join(MADRID_DATASET_STD_PATH, 'transfer_to_icu_outcomes.csv'),
        collapsedy_json=os.path.join(MADRID_DATASET_STD_PATH, 'Spec-Outcomes_TransferToICU.json')

    output:
        x_train_csv=os.path.join(MADRID_DATASET_STD_PATH, 'x_train.csv'),
        x_test_csv=os.path.join(MADRID_DATASET_STD_PATH, 'x_test.csv'),
        y_train_csv=os.path.join(MADRID_DATASET_STD_PATH, 'y_train.csv'),
        y_test_csv=os.path.join(MADRID_DATASET_STD_PATH, 'y_test.csv')

    conda:
        PROJECT_CONDA_ENV_YAML

    shell:
        '''
        python -u {input.script} \
            --input {input.collapsedx_csv} \
            --data_dict {input.collapsedx_json} \
            --test_size 0.2 \
	    --group_cols patient_id \
            --train_csv_filename {output.x_train_csv} \
            --test_csv_filename {output.x_test_csv}

        python -u {input.script} \
            --input {input.collapsedy_csv} \
            --data_dict {input.collapsedy_json} \
            --test_size 0.2 \
            --group_cols patient_id \
            --train_csv_filename {output.y_train_csv} \
            --test_csv_filename {output.y_test_csv}
        '''
